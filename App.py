# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/181xy5GGznAL-FQUKydiwFWjU-GHR_n8B
"""

#!pip install streamlit
#!pip install prophet
#!pip install joblib

import streamlit as st
from datetime import datetime, timedelta
import pandas as pd
from prophet.plot import plot_plotly, plot_components
import joblib

# Load the pre-trained model
model_path = "model.joblib"
model = joblib.load(model_path)

# Load the dataset
df = pd.read_csv('filtered_data.csv')
df['ds'] = pd.to_datetime(df['ds'])
df = df.set_index('ds')

# Apply CSS styles for navy blue and bright colors
st.markdown(
    """
    <style>
    .reportview-container {
        background-color: #001F3F; /* Navy blue background for the whole app */
        color: #FFFFFF; /* White text color for contrast */
    }
    .sidebar .sidebar-content {
        background-color: #003366; /* Darker navy blue for the sidebar */
        color: #FFFFFF; /* White text color for contrast */
    }
    .block-container {
        background-color: #0056A0; /* Bright blue background for content blocks */
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        color: #FFFFFF; /* White text color for contrast */
    }
    .title, .header {
        color: #FFDD00; /* Bright yellow for titles and headers */
    }
    .subheader {
        color: #00FFFF; /* Bright cyan for subheaders */
    }
    .stButton>button {
        background-color: #FF4500; /* Orange-red for buttons */
        color: #FFFFFF; /* White text color for buttons */
    }
    .output-message {
        color: #FF0000; /* Red text color for output message */
        padding: 1rem;
        border-radius: 5px;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Title and Description
st.title('Car Count Forecasting APP with Facebook Prophet')
st.markdown('This app forecasts the number of cars and visualizes hourly, daily, weekly, and monthly data.')

# Visualizing Hourly, Daily, Weekly, and Monthly Number of Cars
st.subheader('Plot of Hourly Number of Cars')
hourly_cars = df.resample('H').sum()
st.line_chart(hourly_cars['y'])

st.subheader('Plot of Daily Number of Cars')
daily_cars = df.resample('D').sum()
st.line_chart(daily_cars['y'])

st.subheader('Plot of Weekly Number of Cars')
weekly_cars = df.resample('W').sum()
st.line_chart(weekly_cars['y'])

st.subheader('Plot of Monthly Number of Cars')
monthly_cars = df.resample('M').sum()
st.line_chart(monthly_cars['y'])

# Inputs for Forecasting
st.header('Make a Forecast Here:')
forecast_option = st.selectbox(
    'Select Forecast Option',
    ('Hourly', 'Daily', 'Weekly', 'Monthly')
)
forecast_date = st.date_input(label='Please enter your forecast date')
forecast_time = None
if forecast_option == 'Hourly':
    forecast_time = st.time_input('Enter the time for the forecast (hh:mm)', value=datetime.now().time())

# Combine date and time if needed
if forecast_time:
    forecast_datetime = datetime.combine(forecast_date, forecast_time)
else:
    forecast_datetime = datetime.combine(forecast_date, datetime.min.time())

# Number of cars input
num_cars = st.number_input(label='Please enter the number of cars for the given date and time')

# Button to forecast
ok = st.button('Forecast Number of Cars')
if ok:
    # Input DataFrame
    input_data = {'ds': [forecast_datetime], 'y': [num_cars]}
    inputs = pd.DataFrame(input_data)
    inputs['ds'] = pd.to_datetime(inputs['ds'])  # Ensure datetime format

    # Making Prediction
    future = pd.DataFrame({'ds': [forecast_datetime]})

    if forecast_option == 'Hourly':
        future['ds'] = future['ds'] + timedelta(hours=1)
    elif forecast_option == 'Daily':
        future['ds'] = future['ds'] + timedelta(days=1)
    elif forecast_option == 'Weekly':
        future['ds'] = future['ds'] + timedelta(weeks=1)
    elif forecast_option == 'Monthly':
        future['ds'] = future['ds'] + pd.DateOffset(months=1)

    forecast = model.predict(future)
    output_values = forecast['yhat']
    st.success(f'The estimated number of cars is {output_values.values[0]:.2f}')
# Command to run the app
    #streamlit run src/predict_page.py
